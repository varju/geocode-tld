#!/usr/bin/env ruby

require 'geocoder'

tld = ARGV.shift
abort "Usage: #{$0} <tld>" unless tld


logger = Logger.new(STDOUT)
logger.level = Logger::WARN

Geocoder.configure(
  :ip_lookup => :telize,
  :logger => logger,
  :timeout => 3,
)


def geocode_city(ip)
  results = Geocoder.search(ip)
  if geo = results.first
    if not geo.city or geo.city.empty?
      return geo.country
    else
      return "#{geo.city}, #{geo.country}"
    end
  else
    return nil
  end
end


Resolv::DNS.open do |dns|
  ns_names = dns.getresources(tld, Resolv::DNS::Resource::IN::NS).map { |r| r.name.to_s }
  ns_names.sort.each do |ns_name|
    ips = dns.getaddresses(ns_name).map { |r| r.address.unpack('CCCC').join('.') }
    cities = ips.flat_map do |ip|
      city = geocode_city(ip)
      if city
        [city]
      else
        STDERR.puts "Error: could not geocode #{ip} for #{ns_name}"
        []
      end
    end

    # assume most TLDs use a single IP per name server
    city_str = cities.length == 1 ? cities.first : cities
    puts "#{ns_name}: #{city_str}"
  end
end
